# The below ingress has corresponding istio virtual service and k8s service specified, for the rest of the services I only provided k8s ingress as they are also keeping same workflow
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ms-aggregator-v200-main
  namespace: sal-dev
  labels:
    app.kubernetes.io/domain: sales
    app.kubernetes.io/environment: dev
    app.kubernetes.io/instance: release-aggregator-200
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ms-aggregator-v200
    helm.sh/chart: core-microservice-ms-aggregator
  annotations:
    konghq.com/plugins: pickles-jwt
    kubernetes.io/ingress.class: kong-dev
    meta.helm.sh/release-name: release-aggregator-200
    meta.helm.sh/release-namespace: sal-dev
status:
  loadBalancer:
    ingress:
      - ip: 10.108.7.133
spec:
  rules:
    - http:
        paths:
          - path: /sales/aggregator/v2.0.0/
            pathType: Prefix
            backend:
              service:
                name: istio-ingressgateway-external-service
                port:
                  number: 80
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  annotations:
    meta.helm.sh/release-name: release-aggregator-200
    meta.helm.sh/release-namespace: sal-dev
  name: ms-aggregator-v200
  namespace: sal-dev
spec:
  gateways:
    - istio-dev/ingressgateway
  hosts:
    - '*'
  http:
    - match:
        - uri:
            prefix: /sales/aggregator/v2.0.0
      name: ms-aggregator-v200-route
      retries:
        attempts: 2
        retryOn: 502,503
      rewrite:
        uri: /sales/aggregator/v2.0.0
      route:
        - destination:
            host: ms-aggregator-v200
            port:
              number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: ms-aggregator-v200
  namespace: sal-dev
  labels:
    BuildId: '322220'
    HealthChecks: enabled
    app: ms-aggregator
    app.kubernetes.io/domain: sales
    app.kubernetes.io/environment: dev
    app.kubernetes.io/instance: release-aggregator-200
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/microservice: ms-aggregator
    app.kubernetes.io/name: ms-aggregator-v200
    app.kubernetes.io/version: 2.20.0
    helm.sh/chart: core-microservice-8.0.0
    version: release-aggregator-200
  annotations:
    HealthChecksPath: /sales/aggregator/v2.0.0/readiness
    Ingress.kubernetes.io/service-upstream: 'true'
    meta.helm.sh/release-name: release-aggregator-200
    meta.helm.sh/release-namespace: sal-dev
status:
  loadBalancer: {}
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: http
    - name: metrics
      protocol: TCP
      port: 8081
      targetPort: metrics
  selector:
    app.kubernetes.io/instance: release-aggregator-200
    app.kubernetes.io/name: ms-aggregator-v200
  clusterIP: 172.16.118.63
  type: ClusterIP
  sessionAffinity: None
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: asset-reports-ms-v100-main
  namespace: am-dev
  labels:
    app.kubernetes.io/domain: am
    app.kubernetes.io/environment: dev
    app.kubernetes.io/instance: rel-asset-reports-v1-100
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: asset-reports-ms-v100
    helm.sh/chart: core-microservice-asset-reports-ms
  annotations:
    konghq.com/plugins: pickles-jwt
    kubernetes.io/ingress.class: kong-dev
    meta.helm.sh/release-name: rel-asset-reports-v1-100
    meta.helm.sh/release-namespace: am-dev
status:
  loadBalancer:
    ingress:
      - ip: 10.108.7.133
spec:
  rules:
    - http:
        paths:
          - path: /am/asset-reports/v1.0.0/
            pathType: Prefix
            backend:
              service:
                name: asset-reports-ms-v100
                port:
                  number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: policymanager-microservice-v10-main
  namespace: apmf-dev
  labels:
    app.kubernetes.io/domain: apmf
    app.kubernetes.io/environment: dev
    app.kubernetes.io/instance: release-v1-10
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: policymanager-microservice-v10
    helm.sh/chart: core-microservice-policymanager-microservice
  annotations:
    konghq.com/plugins: pickles-jwt
    kubernetes.io/ingress.class: kong-dev
    meta.helm.sh/release-name: release-v1-10
    meta.helm.sh/release-namespace: apmf-dev
status:
  loadBalancer:
    ingress:
      - ip: 10.108.7.133
spec:
  rules:
    - http:
        paths:
          - path: /apmf/policymanager/
            pathType: Prefix
            backend:
              service:
                name: istio-ingressgateway-external-service
                port:
                  number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ms-b2b-message-dispatcher-v100-main
  namespace: b2bint-dev
  labels:
    app.kubernetes.io/domain: b2b
    app.kubernetes.io/environment: dev
    app.kubernetes.io/instance: release-v1-ms-msg-dispatcher-100
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ms-b2b-message-dispatcher-v100
    helm.sh/chart: core-microservice-ms-b2b-message-dispatcher
  annotations:
    konghq.com/plugins: pickles-jwt
    kubernetes.io/ingress.class: kong-dev
    meta.helm.sh/release-name: release-v1-ms-msg-dispatcher-100
    meta.helm.sh/release-namespace: b2bint-dev
status:
  loadBalancer:
    ingress:
      - ip: 10.108.7.133
spec:
  rules:
    - http:
        paths:
          - path: /b2b/message-dispatcher/v1.0.0/
            pathType: Prefix
            backend:
              service:
                name: istio-ingressgateway-external-service
                port:
                  number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: driving-license-utility-ms-v100-main
  namespace: ven-dev
  labels:
    app.kubernetes.io/domain: vendor
    app.kubernetes.io/environment: dev
    app.kubernetes.io/instance: release-v1-license-100
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: driving-license-utility-ms-v100
    helm.sh/chart: core-microservice-driving-license-utility-ms
  annotations:
    konghq.com/plugins: pickles-jwt
    kubernetes.io/ingress.class: kong-dev
    meta.helm.sh/release-name: release-v1-license-100
    meta.helm.sh/release-namespace: ven-dev
status:
  loadBalancer:
    ingress:
      - ip: 10.108.7.133
spec:
  rules:
    - http:
        paths:
          - path: /vendor/driving/v1.0.0/
            pathType: Prefix
            backend:
              service:
                name: istio-ingressgateway-external-service
                port:
                  number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ms-finance-v200-main
  namespace: fin-dev
  labels:
    app.kubernetes.io/domain: fin
    app.kubernetes.io/environment: dev
    app.kubernetes.io/instance: release-fin-200
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ms-finance-v200
    helm.sh/chart: core-microservice-ms-finance
  annotations:
    konghq.com/plugins: pickles-jwt
    kubernetes.io/ingress.class: kong-dev
    meta.helm.sh/release-name: release-fin-200
    meta.helm.sh/release-namespace: fin-dev
status:
  loadBalancer:
    ingress:
      - ip: 10.108.7.133
spec:
  rules:
    - http:
        paths:
          - path: /fin/finance/v2.0.0/
            pathType: Prefix
            backend:
              service:
                name: istio-ingressgateway-external-service
                port:
                  number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: organisation-microservice-v200-main
  namespace: forg-dev
  labels:
    app.kubernetes.io/domain: organisation
    app.kubernetes.io/environment: dev
    app.kubernetes.io/instance: release-org-200
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: organisation-microservice-v200
    helm.sh/chart: core-microservice-organisation-microservice
  annotations:
    konghq.com/plugins: pickles-jwt
    kubernetes.io/ingress.class: kong-dev
    meta.helm.sh/release-name: release-org-200
    meta.helm.sh/release-namespace: forg-dev
status:
  loadBalancer:
    ingress:
      - ip: 10.108.7.133
spec:
  rules:
    - http:
        paths:
          - path: /organisation/org/v2.0.0/
            pathType: Prefix
            backend:
              service:
                name: istio-ingressgateway-external-service
                port:
                  number: 80
---
# the below service is not using istio as it is directly refer k8s service (retry is not needed).
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: message-gateway-v200-main
  namespace: message-gateway-dev
  labels:
    app.kubernetes.io/domain: utility
    app.kubernetes.io/environment: dev
    app.kubernetes.io/instance: rel-msg-gate-200
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: message-gateway-v200
    helm.sh/chart: core-microservice-message-gateway
  annotations:
    konghq.com/plugins: pickles-jwt
    kubernetes.io/ingress.class: kong-dev
    meta.helm.sh/release-name: rel-msg-gate-200
    meta.helm.sh/release-namespace: message-gateway-dev
status:
  loadBalancer:
    ingress:
      - ip: 10.108.7.133
spec:
  rules:
    - http:
        paths:
          - path: /utility/message-gateway/v2.0.0/
            pathType: Prefix
            backend:
              service:
                name: message-gateway-v200
                port:
                  number: 80
